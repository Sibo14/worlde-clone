{"ast":null,"code":"import _objectSpread from\"C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";var useWordle=function useWordle(word){//>> State\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),turn=_useState2[0],setTurn=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),currentGuess=_useState4[0],setCurrentGuess=_useState4[1];var _useState5=useState(_toConsumableArray(Array(6))),_useState6=_slicedToArray(_useState5,2),guesses=_useState6[0],setGuesses=_useState6[1];// each guess is an array, create an array with 6 empty spaces\nvar _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),history=_useState8[0],setHistory=_useState8[1];// each guess is a string\nvar _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isCorrect=_useState10[0],setIsCorrect=_useState10[1];var _useState11=useState({}),_useState12=_slicedToArray(_useState11,2),usedKeys=_useState12[0],setUsedKeys=_useState12[1];// {a: 'green' , b:'yellow', c:'grey'}\n// >> Functions\n//  format a guess into an array of letter objects\n// e.g [{key: 'a', color: 'yellow'}]\nvar formatGuess=function formatGuess(){var wordsArray=_toConsumableArray(word);var formattedGuess=_toConsumableArray(currentGuess).map(function(item){return{key:item,color:\"grey\"};});// find any green letters\n// find where the formatted array equals the same letter in the words array and make it green\nformattedGuess.forEach(function(item,index){if(wordsArray[index]===item.key){formattedGuess[index].color=\"green\";wordsArray[index]=null;}});// find any orange letters\n// dont overwrite green letters\nformattedGuess.forEach(function(item,index){if(wordsArray.includes(item.key)&&item.color!==\"green\"){formattedGuess[index].color=\"orange\";wordsArray[wordsArray.indexOf(item.key)]=null;}});return formattedGuess;};// add a new guess to the guesses state\n// update the isCorrect state if the guess is correct\n// add one to the turn state\nvar addNewGuess=function addNewGuess(formattedGuess){if(currentGuess===word){setIsCorrect(true);}setGuesses(function(prevGuesses){var newGuesses=_toConsumableArray(prevGuesses);newGuesses[turn]=formattedGuess;return newGuesses;});setHistory(function(prevHistory){return[].concat(_toConsumableArray(prevHistory),[currentGuess]);});setTurn(function(prevTurn){return prevTurn+1;});setUsedKeys(function(prevUsedKeys){var newKeys=_objectSpread({},prevUsedKeys);formattedGuess.forEach(function(l){var currentColor=newKeys;if(l.color===\"green\"){newKeys[l.key]=\"green\";return;}if(l.color===\"orange\"&&currentColor!==\"green\"){newKeys[l.key]=\"orange\";return;}if(l.color===\"grey\"&&currentColor!==\"green\"&&currentColor!==\"orange\"){newKeys[l.key]=\"grey\";return;}});return newKeys;});setCurrentGuess(\"\");};// handle keyup event & track current guess\n// if user presses enter, add the new guess\nvar handleKeyup=function handleKeyup(_ref){var key=_ref.key;if(key===\"Enter\"){// only add guess turn is < 5\n// no duplicates\nif(turn>5){alert(\"Guesses done\");return;}if(history.includes(currentGuess)){alert(\"already tried word\");return;}if(currentGuess.length!==5){alert.log(\"must be 5 letters\");return;}var formatted=formatGuess();addNewGuess(formatted);}// If key === backspace, remove the last entered value from the string\nif(key===\"Backspace\"){setCurrentGuess(function(prev){return prev.slice(0,-1);});return;}// regualar expression to only store letters and not other key presses\n// Only store entered value if below 5 characters\nif(/^[A-Za-z]$/.test(key)&&currentGuess.length<5){setCurrentGuess(function(prev){return prev+key;});}};return{turn:turn,currentGuess:currentGuess,guesses:guesses,isCorrect:isCorrect,handleKeyup:handleKeyup,usedKeys:usedKeys};};export default useWordle;","map":{"version":3,"names":["useState","useWordle","word","turn","setTurn","currentGuess","setCurrentGuess","Array","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","formatGuess","wordsArray","formattedGuess","map","item","key","color","forEach","index","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","newKeys","l","currentColor","handleKeyup","alert","length","log","formatted","prev","slice","test"],"sources":["C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/src/utilities/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useWordle = (word) => {\r\n  //>> State\r\n  const [turn, setTurn] = useState(0);\r\n  const [currentGuess, setCurrentGuess] = useState(\"\");\r\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array, create an array with 6 empty spaces\r\n  const [history, setHistory] = useState([]); // each guess is a string\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [usedKeys, setUsedKeys] = useState({}); // {a: 'green' , b:'yellow', c:'grey'}\r\n\r\n  // >> Functions\r\n\r\n  //  format a guess into an array of letter objects\r\n  // e.g [{key: 'a', color: 'yellow'}]\r\n\r\n  const formatGuess = () => {\r\n    let wordsArray = [...word];\r\n    let formattedGuess = [...currentGuess].map((item) => {\r\n      return { key: item, color: \"grey\" };\r\n    });\r\n\r\n    // find any green letters\r\n    // find where the formatted array equals the same letter in the words array and make it green\r\n    formattedGuess.forEach((item, index) => {\r\n      if (wordsArray[index] === item.key) {\r\n        formattedGuess[index].color = \"green\";\r\n        wordsArray[index] = null;\r\n      }\r\n    });\r\n\r\n    // find any orange letters\r\n    // dont overwrite green letters\r\n    formattedGuess.forEach((item, index) => {\r\n      if (wordsArray.includes(item.key) && item.color !== \"green\") {\r\n        formattedGuess[index].color = \"orange\";\r\n        wordsArray[wordsArray.indexOf(item.key)] = null;\r\n      }\r\n    });\r\n\r\n    return formattedGuess;\r\n  };\r\n\r\n  // add a new guess to the guesses state\r\n  // update the isCorrect state if the guess is correct\r\n  // add one to the turn state\r\n\r\n  const addNewGuess = (formattedGuess) => {\r\n    if (currentGuess === word) {\r\n      setIsCorrect(true);\r\n    }\r\n\r\n    setGuesses((prevGuesses) => {\r\n      let newGuesses = [...prevGuesses];\r\n      newGuesses[turn] = formattedGuess;\r\n      return newGuesses;\r\n    });\r\n    setHistory((prevHistory) => {\r\n      return [...prevHistory, currentGuess];\r\n    });\r\n\r\n    setTurn((prevTurn) => {\r\n      return prevTurn + 1;\r\n    });\r\n    setUsedKeys((prevUsedKeys) => {\r\n      let newKeys = { ...prevUsedKeys };\r\n      formattedGuess.forEach((l) => {\r\n        const currentColor = newKeys;\r\n\r\n        if (l.color === \"green\") {\r\n          newKeys[l.key] = \"green\";\r\n          return;\r\n        }\r\n        if (l.color === \"orange\" && currentColor !== \"green\") {\r\n          newKeys[l.key] = \"orange\";\r\n          return;\r\n        }\r\n        if (\r\n          l.color === \"grey\" &&\r\n          currentColor !== \"green\" &&\r\n          currentColor !== \"orange\"\r\n        ) {\r\n          newKeys[l.key] = \"grey\";\r\n          return;\r\n        }\r\n      });\r\n      return newKeys;\r\n    });\r\n    setCurrentGuess(\"\");\r\n  };\r\n\r\n  // handle keyup event & track current guess\r\n  // if user presses enter, add the new guess\r\n\r\n  const handleKeyup = ({ key }) => {\r\n    if (key === \"Enter\") {\r\n      // only add guess turn is < 5\r\n      // no duplicates\r\n\r\n      if (turn > 5) {\r\n        alert(\"Guesses done\");\r\n        return;\r\n      }\r\n\r\n      if (history.includes(currentGuess)) {\r\n        alert(\"already tried word\");\r\n        return;\r\n      }\r\n\r\n      if (currentGuess.length !== 5) {\r\n        alert.log(\"must be 5 letters\");\r\n        return;\r\n      }\r\n\r\n      const formatted = formatGuess();\r\n      addNewGuess(formatted);\r\n    }\r\n\r\n    // If key === backspace, remove the last entered value from the string\r\n    if (key === \"Backspace\") {\r\n      setCurrentGuess((prev) => {\r\n        return prev.slice(0, -1);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // regualar expression to only store letters and not other key presses\r\n    // Only store entered value if below 5 characters\r\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < 5) {\r\n      setCurrentGuess((prev) => {\r\n        return prev + key;\r\n      });\r\n    }\r\n  };\r\n\r\n  return { turn, currentGuess, guesses, isCorrect, handleKeyup, usedKeys };\r\n};\r\n\r\nexport default useWordle;\r\n"],"mappings":"waAAA,OAASA,QAAT,KAAyB,OAAzB,CAEA,GAAMC,UAAS,CAAG,QAAZA,UAAY,CAACC,IAAD,CAAU,CAC1B;AACA,cAAwBF,QAAQ,CAAC,CAAD,CAAhC,wCAAOG,IAAP,eAAaC,OAAb,eACA,eAAwCJ,QAAQ,CAAC,EAAD,CAAhD,yCAAOK,YAAP,eAAqBC,eAArB,eACA,eAA8BN,QAAQ,oBAAKO,KAAK,CAAC,CAAD,CAAV,EAAtC,yCAAOC,OAAP,eAAgBC,UAAhB,eAAuD;AACvD,eAA8BT,QAAQ,CAAC,EAAD,CAAtC,yCAAOU,OAAP,eAAgBC,UAAhB,eAA4C;AAC5C,eAAkCX,QAAQ,CAAC,KAAD,CAA1C,0CAAOY,SAAP,gBAAkBC,YAAlB,gBACA,gBAAgCb,QAAQ,CAAC,EAAD,CAAxC,2CAAOc,QAAP,gBAAiBC,WAAjB,gBAA8C;AAE9C;AAEA;AACA;AAEA,GAAMC,YAAW,CAAG,QAAdA,YAAc,EAAM,CACxB,GAAIC,WAAU,oBAAOf,IAAP,CAAd,CACA,GAAIgB,eAAc,CAAG,mBAAIb,YAAJ,EAAkBc,GAAlB,CAAsB,SAACC,IAAD,CAAU,CACnD,MAAO,CAAEC,GAAG,CAAED,IAAP,CAAaE,KAAK,CAAE,MAApB,CAAP,CACD,CAFoB,CAArB,CAIA;AACA;AACAJ,cAAc,CAACK,OAAf,CAAuB,SAACH,IAAD,CAAOI,KAAP,CAAiB,CACtC,GAAIP,UAAU,CAACO,KAAD,CAAV,GAAsBJ,IAAI,CAACC,GAA/B,CAAoC,CAClCH,cAAc,CAACM,KAAD,CAAd,CAAsBF,KAAtB,CAA8B,OAA9B,CACAL,UAAU,CAACO,KAAD,CAAV,CAAoB,IAApB,CACD,CACF,CALD,EAOA;AACA;AACAN,cAAc,CAACK,OAAf,CAAuB,SAACH,IAAD,CAAOI,KAAP,CAAiB,CACtC,GAAIP,UAAU,CAACQ,QAAX,CAAoBL,IAAI,CAACC,GAAzB,GAAiCD,IAAI,CAACE,KAAL,GAAe,OAApD,CAA6D,CAC3DJ,cAAc,CAACM,KAAD,CAAd,CAAsBF,KAAtB,CAA8B,QAA9B,CACAL,UAAU,CAACA,UAAU,CAACS,OAAX,CAAmBN,IAAI,CAACC,GAAxB,CAAD,CAAV,CAA2C,IAA3C,CACD,CACF,CALD,EAOA,MAAOH,eAAP,CACD,CAzBD,CA2BA;AACA;AACA;AAEA,GAAMS,YAAW,CAAG,QAAdA,YAAc,CAACT,cAAD,CAAoB,CACtC,GAAIb,YAAY,GAAKH,IAArB,CAA2B,CACzBW,YAAY,CAAC,IAAD,CAAZ,CACD,CAEDJ,UAAU,CAAC,SAACmB,WAAD,CAAiB,CAC1B,GAAIC,WAAU,oBAAOD,WAAP,CAAd,CACAC,UAAU,CAAC1B,IAAD,CAAV,CAAmBe,cAAnB,CACA,MAAOW,WAAP,CACD,CAJS,CAAV,CAKAlB,UAAU,CAAC,SAACmB,WAAD,CAAiB,CAC1B,mCAAWA,WAAX,GAAwBzB,YAAxB,GACD,CAFS,CAAV,CAIAD,OAAO,CAAC,SAAC2B,QAAD,CAAc,CACpB,MAAOA,SAAQ,CAAG,CAAlB,CACD,CAFM,CAAP,CAGAhB,WAAW,CAAC,SAACiB,YAAD,CAAkB,CAC5B,GAAIC,QAAO,kBAAQD,YAAR,CAAX,CACAd,cAAc,CAACK,OAAf,CAAuB,SAACW,CAAD,CAAO,CAC5B,GAAMC,aAAY,CAAGF,OAArB,CAEA,GAAIC,CAAC,CAACZ,KAAF,GAAY,OAAhB,CAAyB,CACvBW,OAAO,CAACC,CAAC,CAACb,GAAH,CAAP,CAAiB,OAAjB,CACA,OACD,CACD,GAAIa,CAAC,CAACZ,KAAF,GAAY,QAAZ,EAAwBa,YAAY,GAAK,OAA7C,CAAsD,CACpDF,OAAO,CAACC,CAAC,CAACb,GAAH,CAAP,CAAiB,QAAjB,CACA,OACD,CACD,GACEa,CAAC,CAACZ,KAAF,GAAY,MAAZ,EACAa,YAAY,GAAK,OADjB,EAEAA,YAAY,GAAK,QAHnB,CAIE,CACAF,OAAO,CAACC,CAAC,CAACb,GAAH,CAAP,CAAiB,MAAjB,CACA,OACD,CACF,CAnBD,EAoBA,MAAOY,QAAP,CACD,CAvBU,CAAX,CAwBA3B,eAAe,CAAC,EAAD,CAAf,CACD,CA1CD,CA4CA;AACA;AAEA,GAAM8B,YAAW,CAAG,QAAdA,YAAc,MAAa,IAAVf,IAAU,MAAVA,GAAU,CAC/B,GAAIA,GAAG,GAAK,OAAZ,CAAqB,CACnB;AACA;AAEA,GAAIlB,IAAI,CAAG,CAAX,CAAc,CACZkC,KAAK,CAAC,cAAD,CAAL,CACA,OACD,CAED,GAAI3B,OAAO,CAACe,QAAR,CAAiBpB,YAAjB,CAAJ,CAAoC,CAClCgC,KAAK,CAAC,oBAAD,CAAL,CACA,OACD,CAED,GAAIhC,YAAY,CAACiC,MAAb,GAAwB,CAA5B,CAA+B,CAC7BD,KAAK,CAACE,GAAN,CAAU,mBAAV,EACA,OACD,CAED,GAAMC,UAAS,CAAGxB,WAAW,EAA7B,CACAW,WAAW,CAACa,SAAD,CAAX,CACD,CAED;AACA,GAAInB,GAAG,GAAK,WAAZ,CAAyB,CACvBf,eAAe,CAAC,SAACmC,IAAD,CAAU,CACxB,MAAOA,KAAI,CAACC,KAAL,CAAW,CAAX,CAAc,CAAC,CAAf,CAAP,CACD,CAFc,CAAf,CAGA,OACD,CAED;AACA;AACA,GAAI,aAAaC,IAAb,CAAkBtB,GAAlB,GAA0BhB,YAAY,CAACiC,MAAb,CAAsB,CAApD,CAAuD,CACrDhC,eAAe,CAAC,SAACmC,IAAD,CAAU,CACxB,MAAOA,KAAI,CAAGpB,GAAd,CACD,CAFc,CAAf,CAGD,CACF,CAvCD,CAyCA,MAAO,CAAElB,IAAI,CAAJA,IAAF,CAAQE,YAAY,CAAZA,YAAR,CAAsBG,OAAO,CAAPA,OAAtB,CAA+BI,SAAS,CAATA,SAA/B,CAA0CwB,WAAW,CAAXA,WAA1C,CAAuDtB,QAAQ,CAARA,QAAvD,CAAP,CACD,CAtID,CAwIA,cAAeb,UAAf"},"metadata":{},"sourceType":"module"}