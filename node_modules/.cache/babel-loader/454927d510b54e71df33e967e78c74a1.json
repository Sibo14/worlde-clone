{"ast":null,"code":"import{makeStyles,Typography}from\"@material-ui/core\";import React from\"react\";// >> CSS\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles(function(){return{container:{width:\"100%\",height:\"100%\",display:\"flex\",alignItems:\"center\",justifyContent:\"center\"},textColor:{color:\"#fff\"}};});var GameStatePopup=function GameStatePopup(_ref){var isCorrect=_ref.isCorrect,turn=_ref.turn,solution=_ref.solution;// >> Styles\nvar classes=useStyles();// >> Return\nreturn/*#__PURE__*/_jsxs(\"div\",{className:classes.container,children:[isCorrect&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{className:classes.textColor,children:\"You Win!\"}),/*#__PURE__*/_jsxs(Typography,{className:classes.textColor,children:[\"You found the word in \",turn,\" guesses\"]})]}),!isCorrect&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{className:classes.textColor,children:\"Better Luck Next Time\"}),/*#__PURE__*/_jsxs(Typography,{className:classes.textColor,children:[\"The word was:\",/*#__PURE__*/_jsxs(\"span\",{style:{color:\"red\",fontWeight:\"bold\",textTransform:\"uppercase\"},children:[\" \",solution]})]})]})]});};export default GameStatePopup;","map":{"version":3,"names":["makeStyles","Typography","React","useStyles","container","width","height","display","alignItems","justifyContent","textColor","color","GameStatePopup","isCorrect","turn","solution","classes","fontWeight","textTransform"],"sources":["C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/src/components/popup/GameStatePopup.jsx"],"sourcesContent":["import { makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n// >> CSS\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n\r\n  textColor: {\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst GameStatePopup = ({ isCorrect, turn, solution }) => {\r\n  // >> Styles\r\n  const classes = useStyles();\r\n\r\n  // >> Return\r\n  return (\r\n    <div className={classes.container}>\r\n      {isCorrect && (\r\n        <div>\r\n          <Typography className={classes.textColor}>You Win!</Typography>\r\n          <Typography className={classes.textColor}>\r\n            You found the word in {turn} guesses\r\n          </Typography>\r\n        </div>\r\n      )}\r\n      {!isCorrect && (\r\n        <div>\r\n          <Typography className={classes.textColor}>\r\n            Better Luck Next Time\r\n          </Typography>\r\n          <Typography className={classes.textColor}>\r\n            The word was:\r\n            <span\r\n              style={{\r\n                color: \"red\",\r\n                fontWeight: \"bold\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              {solution}\r\n            </span>\r\n          </Typography>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameStatePopup;\r\n"],"mappings":"AAAA,OAASA,UAAT,CAAqBC,UAArB,KAAuC,mBAAvC,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAEA;wFACA,GAAMC,UAAS,CAAGH,UAAU,CAAC,iBAAO,CAClCI,SAAS,CAAE,CACTC,KAAK,CAAE,MADE,CAETC,MAAM,CAAE,MAFC,CAGTC,OAAO,CAAE,MAHA,CAITC,UAAU,CAAE,QAJH,CAKTC,cAAc,CAAE,QALP,CADuB,CASlCC,SAAS,CAAE,CACTC,KAAK,CAAE,MADE,CATuB,CAAP,EAAD,CAA5B,CAcA,GAAMC,eAAc,CAAG,QAAjBA,eAAiB,MAAmC,IAAhCC,UAAgC,MAAhCA,SAAgC,CAArBC,IAAqB,MAArBA,IAAqB,CAAfC,QAAe,MAAfA,QAAe,CACxD;AACA,GAAMC,QAAO,CAAGb,SAAS,EAAzB,CAEA;AACA,mBACE,aAAK,SAAS,CAAEa,OAAO,CAACZ,SAAxB,WACGS,SAAS,eACR,oCACE,KAAC,UAAD,EAAY,SAAS,CAAEG,OAAO,CAACN,SAA/B,sBADF,cAEE,MAAC,UAAD,EAAY,SAAS,CAAEM,OAAO,CAACN,SAA/B,oCACyBI,IADzB,cAFF,GAFJ,CASG,CAACD,SAAD,eACC,oCACE,KAAC,UAAD,EAAY,SAAS,CAAEG,OAAO,CAACN,SAA/B,mCADF,cAIE,MAAC,UAAD,EAAY,SAAS,CAAEM,OAAO,CAACN,SAA/B,wCAEE,cACE,KAAK,CAAE,CACLC,KAAK,CAAE,KADF,CAELM,UAAU,CAAE,MAFP,CAGLC,aAAa,CAAE,WAHV,CADT,WAOG,GAPH,CAQGH,QARH,GAFF,GAJF,GAVJ,GADF,CAgCD,CArCD,CAuCA,cAAeH,eAAf"},"metadata":{},"sourceType":"module"}