{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = word => {\n  _s();\n\n  //>> State\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState(\"\");\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array, create an array with 6 empty spaces\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [usedKeys, setUsedKeys] = useState({}); // {a: 'green' , b:'yellow', c:'grey'}\n  // >> Functions\n  //  format a guess into an array of letter objects\n  // e.g [{key: 'a', color: 'yellow'}]\n\n  const formatGuess = () => {\n    let wordsArray = [...word];\n    let formattedGuess = [...currentGuess].map(item => {\n      return {\n        key: item,\n        color: \"grey\"\n      };\n    }); // find any green letters\n    // find where the formatted array equals the same letter in the words array and make it green\n\n    formattedGuess.forEach((item, index) => {\n      if (wordsArray[index] === item.key) {\n        formattedGuess[index].color = \"green\";\n        wordsArray[index] = null;\n      }\n    }); // find any orange letters\n    // dont overwrite green letters\n\n    formattedGuess.forEach((item, index) => {\n      if (wordsArray.includes(item.key) && item.color !== \"green\") {\n        formattedGuess[index].color = \"orange\";\n        wordsArray[wordsArray.indexOf(item.key)] = null;\n      }\n    });\n    return formattedGuess;\n  }; // add a new guess to the guesses state\n  // update the isCorrect state if the guess is correct\n  // add one to the turn state\n\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === word) {\n      setIsCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setUsedKeys(prevUsedKeys => {\n      let newKeys = { ...prevUsedKeys\n      };\n      formattedGuess.forEach(l => {\n        const currentColor = newKeys;\n\n        if (l.color === \"green\") {\n          newKeys[l.key] = \"green\";\n          return;\n        }\n\n        if (l.color === \"orange\" && currentColor !== \"green\") {\n          newKeys[l.key] = \"orange\";\n          return;\n        }\n\n        if (l.color === \"grey\" && currentColor !== \"green\" && currentColor !== \"orange\") {\n          newKeys[l.key] = \"grey\";\n          return;\n        }\n      });\n      return newKeys;\n    });\n    setCurrentGuess(\"\");\n  }; // handle keyup event & track current guess\n  // if user presses enter, add the new guess\n\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      // only add guess turn is < 5\n      // no duplicates\n      if (turn > 5) {\n        console.log(\"Guesses done\");\n        return;\n      }\n\n      if (history.includes(currentGuess)) {\n        console.log(\"already tried word\");\n        return;\n      }\n\n      if (currentGuess.length !== 5) {\n        console.log(\"must be 5 letters\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n      console.log(formatted);\n    } // If key === backspace, remove the last entered value from the string\n\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    } // regualar expression to only store letters and not other key presses\n    // Only store entered value if below 5 characters\n\n\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < 5) {\n      setCurrentGuess(prev => {\n        return prev + key;\n      });\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup,\n    usedKeys\n  };\n};\n\n_s(useWordle, \"diD5Fi/M9sZ7gdsC6awCzasUo8c=\");\n\nexport default useWordle;","map":{"version":3,"names":["useState","useWordle","word","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","formatGuess","wordsArray","formattedGuess","map","item","key","color","forEach","index","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","newKeys","l","currentColor","handleKeyup","console","log","length","formatted","prev","slice","test"],"sources":["C:/Users/sibzm/OneDrive/Documents/github/worlde-clone/src/utilities/hooks/useWordle.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useWordle = (word) => {\r\n  //>> State\r\n  const [turn, setTurn] = useState(0);\r\n  const [currentGuess, setCurrentGuess] = useState(\"\");\r\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array, create an array with 6 empty spaces\r\n  const [history, setHistory] = useState([]); // each guess is a string\r\n  const [isCorrect, setIsCorrect] = useState(false);\r\n  const [usedKeys, setUsedKeys] = useState({}); // {a: 'green' , b:'yellow', c:'grey'}\r\n\r\n  // >> Functions\r\n\r\n  //  format a guess into an array of letter objects\r\n  // e.g [{key: 'a', color: 'yellow'}]\r\n\r\n  const formatGuess = () => {\r\n    let wordsArray = [...word];\r\n    let formattedGuess = [...currentGuess].map((item) => {\r\n      return { key: item, color: \"grey\" };\r\n    });\r\n\r\n    // find any green letters\r\n    // find where the formatted array equals the same letter in the words array and make it green\r\n    formattedGuess.forEach((item, index) => {\r\n      if (wordsArray[index] === item.key) {\r\n        formattedGuess[index].color = \"green\";\r\n        wordsArray[index] = null;\r\n      }\r\n    });\r\n\r\n    // find any orange letters\r\n    // dont overwrite green letters\r\n    formattedGuess.forEach((item, index) => {\r\n      if (wordsArray.includes(item.key) && item.color !== \"green\") {\r\n        formattedGuess[index].color = \"orange\";\r\n        wordsArray[wordsArray.indexOf(item.key)] = null;\r\n      }\r\n    });\r\n\r\n    return formattedGuess;\r\n  };\r\n\r\n  // add a new guess to the guesses state\r\n  // update the isCorrect state if the guess is correct\r\n  // add one to the turn state\r\n\r\n  const addNewGuess = (formattedGuess) => {\r\n    if (currentGuess === word) {\r\n      setIsCorrect(true);\r\n    }\r\n\r\n    setGuesses((prevGuesses) => {\r\n      let newGuesses = [...prevGuesses];\r\n      newGuesses[turn] = formattedGuess;\r\n      return newGuesses;\r\n    });\r\n    setHistory((prevHistory) => {\r\n      return [...prevHistory, currentGuess];\r\n    });\r\n\r\n    setTurn((prevTurn) => {\r\n      return prevTurn + 1;\r\n    });\r\n    setUsedKeys((prevUsedKeys) => {\r\n      let newKeys = { ...prevUsedKeys };\r\n      formattedGuess.forEach((l) => {\r\n        const currentColor = newKeys;\r\n\r\n        if (l.color === \"green\") {\r\n          newKeys[l.key] = \"green\";\r\n          return;\r\n        }\r\n        if (l.color === \"orange\" && currentColor !== \"green\") {\r\n          newKeys[l.key] = \"orange\";\r\n          return;\r\n        }\r\n        if (\r\n          l.color === \"grey\" &&\r\n          currentColor !== \"green\" &&\r\n          currentColor !== \"orange\"\r\n        ) {\r\n          newKeys[l.key] = \"grey\";\r\n          return;\r\n        }\r\n      });\r\n      return newKeys;\r\n    });\r\n    setCurrentGuess(\"\");\r\n  };\r\n\r\n  // handle keyup event & track current guess\r\n  // if user presses enter, add the new guess\r\n\r\n  const handleKeyup = ({ key }) => {\r\n    if (key === \"Enter\") {\r\n      // only add guess turn is < 5\r\n      // no duplicates\r\n\r\n      if (turn > 5) {\r\n        console.log(\"Guesses done\");\r\n        return;\r\n      }\r\n\r\n      if (history.includes(currentGuess)) {\r\n        console.log(\"already tried word\");\r\n        return;\r\n      }\r\n\r\n      if (currentGuess.length !== 5) {\r\n        console.log(\"must be 5 letters\");\r\n        return;\r\n      }\r\n\r\n      const formatted = formatGuess();\r\n      addNewGuess(formatted);\r\n      console.log(formatted);\r\n    }\r\n\r\n    // If key === backspace, remove the last entered value from the string\r\n    if (key === \"Backspace\") {\r\n      setCurrentGuess((prev) => {\r\n        return prev.slice(0, -1);\r\n      });\r\n      return;\r\n    }\r\n\r\n    // regualar expression to only store letters and not other key presses\r\n    // Only store entered value if below 5 characters\r\n    if (/^[A-Za-z]$/.test(key) && currentGuess.length < 5) {\r\n      setCurrentGuess((prev) => {\r\n        return prev + key;\r\n      });\r\n    }\r\n  };\r\n\r\n  return { turn, currentGuess, guesses, isCorrect, handleKeyup, usedKeys };\r\n};\r\n\r\nexport default useWordle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}